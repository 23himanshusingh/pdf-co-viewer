{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIMANSHU SINGH\\\\Downloads\\\\pdf-co-viewer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { pdfjs } from 'react-pdf';\nimport PDFViewer from './components/PDFViewer'; // Correct path to PDFViewer component\nimport Navigation from './components/Navigation'; // Correct path to Navigation component\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Set up PDF worker from react-pdf\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = new URL('pdfjs-dist/build/pdf.worker.min.js', import.meta.url).toString();\nconst socket = io('http://localhost:5000'); // Connect to the backend server\n\nfunction App() {\n  _s();\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [numPages, setNumPages] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const pdfUrl = 'https://drive.google.com/uc?export=download&id=1dAIdBrMSskp6W8R5LSyxvsGvyDoCA_kR'; // Google Drive PDF URL\n\n  // Listen for slide changes and synchronize the page number\n  useEffect(() => {\n    socket.on('syncPage', ({\n      currentPage,\n      pdfUrl\n    }) => {\n      setPdfFile(pdfUrl); // Use the PDF URL sent from the backend\n      setPageNumber(currentPage); // Synchronize the page number with the backend state\n    });\n    socket.on('slideChange', pageNumber => {\n      setPageNumber(pageNumber); // Update page number if changed by admin\n    });\n    return () => {\n      socket.off('syncPage');\n      socket.off('slideChange');\n    };\n  }, []);\n\n  // Handle slide change (admin)\n  const handlePrevious = () => {\n    if (pageNumber > 1) {\n      const newPageNumber = pageNumber - 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the backend\n    }\n  };\n  const handleNext = () => {\n    if (pageNumber < numPages) {\n      const newPageNumber = pageNumber + 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the backend\n    }\n  };\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => setNumPages(numPages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Co-Viewer PDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PDFViewer, {\n      pdfFile: pdfUrl,\n      pageNumber: pageNumber,\n      onLoadSuccess: onDocumentLoadSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      pageNumber: pageNumber,\n      numPages: numPages,\n      onPrevious: handlePrevious,\n      onNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isAdmin,\n          onChange: e => setIsAdmin(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), \"Admin Mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pCxy6p000LXF0hbHfgObaqp5nBo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","pdfjs","PDFViewer","Navigation","io","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","URL","import","meta","url","toString","socket","App","_s","pdfFile","setPdfFile","pageNumber","setPageNumber","numPages","setNumPages","isAdmin","setIsAdmin","pdfUrl","on","currentPage","off","handlePrevious","newPageNumber","emit","handleNext","onDocumentLoadSuccess","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLoadSuccess","onPrevious","onNext","type","checked","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/HIMANSHU SINGH/Downloads/pdf-co-viewer/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { pdfjs } from 'react-pdf';\nimport PDFViewer from './components/PDFViewer';  // Correct path to PDFViewer component\nimport Navigation from './components/Navigation';  // Correct path to Navigation component\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Set up PDF worker from react-pdf\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.js',\n  import.meta.url\n).toString();\n\nconst socket = io('http://localhost:5000'); // Connect to the backend server\n\nfunction App() {\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [numPages, setNumPages] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const pdfUrl = 'https://drive.google.com/uc?export=download&id=1dAIdBrMSskp6W8R5LSyxvsGvyDoCA_kR'; // Google Drive PDF URL\n\n  // Listen for slide changes and synchronize the page number\n  useEffect(() => {\n    socket.on('syncPage', ({ currentPage, pdfUrl }) => {\n      setPdfFile(pdfUrl);  // Use the PDF URL sent from the backend\n      setPageNumber(currentPage); // Synchronize the page number with the backend state\n    });\n\n    socket.on('slideChange', (pageNumber) => {\n      setPageNumber(pageNumber); // Update page number if changed by admin\n    });\n\n    return () => {\n      socket.off('syncPage');\n      socket.off('slideChange');\n    };\n  }, []);\n\n  // Handle slide change (admin)\n  const handlePrevious = () => {\n    if (pageNumber > 1) {\n      const newPageNumber = pageNumber - 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the backend\n    }\n  };\n\n  const handleNext = () => {\n    if (pageNumber < numPages) {\n      const newPageNumber = pageNumber + 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the backend\n    }\n  };\n\n  const onDocumentLoadSuccess = ({ numPages }) => setNumPages(numPages);\n\n  return (\n    <div className=\"App\">\n      <h1>Co-Viewer PDF Application</h1>\n      <PDFViewer\n        pdfFile={pdfUrl}\n        pageNumber={pageNumber}\n        onLoadSuccess={onDocumentLoadSuccess}\n      />\n      <Navigation\n        pageNumber={pageNumber}\n        numPages={numPages}\n        onPrevious={handlePrevious}\n        onNext={handleNext}\n      />\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isAdmin}\n            onChange={(e) => setIsAdmin(e.target.checked)}\n          />\n          Admin Mode\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}