{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIMANSHU SINGH\\\\Downloads\\\\pdf-co-viewer\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$();\n// client/src/context/SocketContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n// Create a SocketContext to provide the socket to the entire app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:4000'); // Connect to the server\n\nconst SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1); // Initial page\n\n  useEffect(() => {\n    // Listen for page synchronization event from the server\n    socket.on('sync-page', newPage => {\n      setCurrentPage(newPage); // Update page number\n    });\n    return () => {\n      socket.off('sync-page'); // Clean up the event listener\n    };\n  }, []);\n  const changePage = newPage => {\n    setCurrentPage(newPage); // Update page locally\n    socket.emit('change-page', newPage); // Notify server to sync page\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      currentPage,\n      changePage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"GDYsIxij9y/ZFL42bMqqthZmeP4=\");\n_c = SocketProvider;\nexport { SocketContext, SocketProvider };\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","SocketContext","socket","SocketProvider","children","_s","currentPage","setCurrentPage","on","newPage","off","changePage","emit","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HIMANSHU SINGH/Downloads/pdf-co-viewer/client/src/context/SocketContext.js"],"sourcesContent":["// client/src/context/SocketContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\n// Create a SocketContext to provide the socket to the entire app\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http://localhost:4000'); // Connect to the server\r\n\r\nconst SocketProvider = ({ children }) => {\r\n  const [currentPage, setCurrentPage] = useState(1); // Initial page\r\n\r\n  useEffect(() => {\r\n    // Listen for page synchronization event from the server\r\n    socket.on('sync-page', (newPage) => {\r\n      setCurrentPage(newPage);  // Update page number\r\n    });\r\n\r\n    return () => {\r\n      socket.off('sync-page');  // Clean up the event listener\r\n    };\r\n  }, []);\r\n\r\n  const changePage = (newPage) => {\r\n    setCurrentPage(newPage);  // Update page locally\r\n    socket.emit('change-page', newPage);  // Notify server to sync page\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={{ currentPage, changePage }}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SocketContext, SocketProvider };\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,EAAE,MAAM,kBAAkB;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAErC,MAAMO,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMK,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnDC,SAAS,CAAC,MAAM;IACd;IACAK,MAAM,CAACM,EAAE,CAAC,WAAW,EAAGC,OAAO,IAAK;MAClCF,cAAc,CAACE,OAAO,CAAC,CAAC,CAAE;IAC5B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXP,MAAM,CAACQ,GAAG,CAAC,WAAW,CAAC,CAAC,CAAE;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAIF,OAAO,IAAK;IAC9BF,cAAc,CAACE,OAAO,CAAC,CAAC,CAAE;IAC1BP,MAAM,CAACU,IAAI,CAAC,aAAa,EAAEH,OAAO,CAAC,CAAC,CAAE;EACxC,CAAC;EAED,oBACET,OAAA,CAACC,aAAa,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,WAAW;MAAEK;IAAW,CAAE;IAAAP,QAAA,EACxDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACb,EAAA,CAxBIF,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AA0BpB,SAASF,aAAa,EAAEE,cAAc;AAAG,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}