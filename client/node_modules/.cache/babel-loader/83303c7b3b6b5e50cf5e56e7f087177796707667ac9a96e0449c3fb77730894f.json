{"ast":null,"code":"const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst multer = require('multer');\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\"\n  }\n});\napp.use(cors());\napp.use('/uploads', express.static('uploads'));\n\n// Set up multer for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\nconst upload = multer({\n  storage\n});\nlet currentPage = 1;\nlet pdfUrl = '';\nlet adminSocketId = null;\nio.on('connection', socket => {\n  console.log('New user connected');\n\n  // Assign the first user as admin\n  if (!adminSocketId) {\n    adminSocketId = socket.id; // Assign the first connected user as admin\n    socket.emit('role', 'admin'); // Notify this user they are the admin\n  } else {\n    socket.emit('role', 'viewer'); // All other users are viewers\n  }\n\n  // Sync page and PDF when a user joins\n  socket.emit('pageChanged', currentPage);\n  socket.emit('pdfUrlChanged', pdfUrl);\n\n  // Listen for page change from presenter\n  socket.on('changePage', page => {\n    currentPage = page;\n    socket.broadcast.emit('pageChanged', currentPage); // Notify all other users\n  });\n  socket.on('disconnect', () => {\n    console.log('User  disconnected');\n    // If the admin disconnects, reset the adminSocketId\n    if (socket.id === adminSocketId) {\n      adminSocketId = null; // Allow a new admin to be assigned\n    }\n  });\n});\napp.post('/upload', upload.single('pdf'), (req, res) => {\n  const pdfUrl = `http://localhost:4000/uploads/${req.file.filename}`; // Adjust for deployment\n  io.emit('pdfUrlChanged', pdfUrl); // Notify all users of the new PDF\n  res.json({\n    url: pdfUrl\n  });\n});\nconst PORT = process.env.PORT || 4000;\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","http","socketIo","cors","multer","app","server","createServer","io","origin","use","static","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","currentPage","pdfUrl","adminSocketId","on","socket","console","log","id","emit","page","broadcast","post","single","res","json","url","PORT","process","env","listen"],"sources":["C:/Users/HIMANSHU SINGH/Downloads/pdf-co-viewer/client/src/index.js"],"sourcesContent":["const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst multer = require('multer');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, { cors: { origin: \"*\" } });\n\napp.use(cors());\napp.use('/uploads', express.static('uploads'));\n\n// Set up multer for file uploads\nconst storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n        cb(null, 'uploads/');\n    },\n    filename: (req, file, cb) => {\n        cb(null, file.originalname);\n    }\n});\n\nconst upload = multer({ storage });\n\nlet currentPage = 1;\nlet pdfUrl = '';\nlet adminSocketId = null;\n\nio.on('connection', (socket) => {\n    console.log('New user connected');\n\n    // Assign the first user as admin\n    if (!adminSocketId) {\n        adminSocketId = socket.id; // Assign the first connected user as admin\n        socket.emit('role', 'admin'); // Notify this user they are the admin\n    } else {\n        socket.emit('role', 'viewer'); // All other users are viewers\n    }\n\n    // Sync page and PDF when a user joins\n    socket.emit('pageChanged', currentPage);\n    socket.emit('pdfUrlChanged', pdfUrl);\n\n    // Listen for page change from presenter\n    socket.on('changePage', (page) => {\n        currentPage = page;\n        socket.broadcast.emit('pageChanged', currentPage); // Notify all other users\n    });\n\n    socket.on('disconnect', () => {\n        console.log('User  disconnected');\n        // If the admin disconnects, reset the adminSocketId\n        if (socket.id === adminSocketId) {\n            adminSocketId = null; // Allow a new admin to be assigned\n        }\n    });\n});\n\napp.post('/upload', upload.single('pdf'), (req, res) => {\n    const pdfUrl = `http://localhost:4000/uploads/${req.file.filename}`; // Adjust for deployment\n    io.emit('pdfUrlChanged', pdfUrl); // Notify all users of the new PDF\n    res.json({ url: pdfUrl });\n});\n\nconst PORT = process.env.PORT || 4000;\nserver.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}