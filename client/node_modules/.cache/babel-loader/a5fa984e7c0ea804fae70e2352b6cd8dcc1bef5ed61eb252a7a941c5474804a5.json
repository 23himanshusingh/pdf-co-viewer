{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HIMANSHU SINGH\\\\Downloads\\\\pdf-co-viewer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { pdfjs } from 'react-pdf';\nimport PDFViewer from './components/PDFViewer';\nimport Navigation from './components/Navigation';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Set the worker source for pdfjs using the correct local path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = new URL('pdfjs-dist/build/pdf.worker.min.js', import.meta.url).toString();\nconst socket = io('http://localhost:5000'); // Connect to the backend server\n\nfunction App() {\n  _s();\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [numPages, setNumPages] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Listen for slide changes from the admin\n  useEffect(() => {\n    socket.on('slideChange', pageNumber => {\n      setPageNumber(pageNumber); // Synchronize the page number with the admin\n    });\n    return () => {\n      socket.off('slideChange');\n    };\n  }, []);\n\n  // Handle file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('pdf', file);\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData\n    }).then(res => res.json()).then(data => setPdfFile(data.path)) // Set the PDF file URL\n    .catch(error => console.error('Error uploading file:', error));\n  };\n\n  // Handle slide change (admin)\n  const handlePrevious = () => {\n    if (pageNumber > 1) {\n      const newPageNumber = pageNumber - 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the viewers\n    }\n  };\n  const handleNext = () => {\n    if (pageNumber < numPages) {\n      const newPageNumber = pageNumber + 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the viewers\n    }\n  };\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => setNumPages(numPages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Co-Viewer PDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload,\n        accept: \"application/pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PDFViewer, {\n      pdfFile: pdfFile,\n      pageNumber: pageNumber,\n      onLoadSuccess: onDocumentLoadSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      pageNumber: pageNumber,\n      numPages: numPages,\n      onPrevious: handlePrevious,\n      onNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isAdmin,\n          onChange: e => setIsAdmin(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), \"Admin Mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pCxy6p000LXF0hbHfgObaqp5nBo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","pdfjs","PDFViewer","Navigation","io","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","URL","import","meta","url","toString","socket","App","_s","pdfFile","setPdfFile","pageNumber","setPageNumber","numPages","setNumPages","isAdmin","setIsAdmin","on","off","handleFileUpload","event","file","target","files","formData","FormData","append","fetch","method","body","then","res","json","data","path","catch","error","console","handlePrevious","newPageNumber","emit","handleNext","onDocumentLoadSuccess","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onLoadSuccess","onPrevious","onNext","checked","e","_c","$RefreshReg$"],"sources":["C:/Users/HIMANSHU SINGH/Downloads/pdf-co-viewer/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { pdfjs } from 'react-pdf';\nimport PDFViewer from './components/PDFViewer';\nimport Navigation from './components/Navigation';\nimport io from 'socket.io-client';\nimport './App.css';\n\n// Set the worker source for pdfjs using the correct local path\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.js',\n  import.meta.url\n).toString();\n\nconst socket = io('http://localhost:5000'); // Connect to the backend server\n\nfunction App() {\n  const [pdfFile, setPdfFile] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [numPages, setNumPages] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Listen for slide changes from the admin\n  useEffect(() => {\n    socket.on('slideChange', (pageNumber) => {\n      setPageNumber(pageNumber); // Synchronize the page number with the admin\n    });\n\n    return () => {\n      socket.off('slideChange');\n    };\n  }, []);\n\n  // Handle file upload\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('pdf', file);\n\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((data) => setPdfFile(data.path)) // Set the PDF file URL\n      .catch((error) => console.error('Error uploading file:', error));\n  };\n\n  // Handle slide change (admin)\n  const handlePrevious = () => {\n    if (pageNumber > 1) {\n      const newPageNumber = pageNumber - 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the viewers\n    }\n  };\n\n  const handleNext = () => {\n    if (pageNumber < numPages) {\n      const newPageNumber = pageNumber + 1;\n      setPageNumber(newPageNumber);\n      socket.emit('changeSlide', newPageNumber); // Notify the viewers\n    }\n  };\n\n  const onDocumentLoadSuccess = ({ numPages }) => setNumPages(numPages);\n\n  return (\n    <div className=\"App\">\n      <h1>Co-Viewer PDF Application</h1>\n      {isAdmin && (\n        <div>\n          <input type=\"file\" onChange={handleFileUpload} accept=\"application/pdf\" />\n        </div>\n      )}\n      <PDFViewer\n        pdfFile={pdfFile}\n        pageNumber={pageNumber}\n        onLoadSuccess={onDocumentLoadSuccess}\n      />\n      <Navigation\n        pageNumber={pageNumber}\n        numPages={numPages}\n        onPrevious={handlePrevious}\n        onNext={handleNext}\n      />\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={isAdmin}\n            onChange={(e) => setIsAdmin(e.target.checked)}\n          />\n          Admin Mode\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}